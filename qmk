#!/usr/bin/env python3


import argparse
import json
import os
import shutil
import subprocess
import sys
import time

import visualizer


def abs_path(*paths):
    dirname = os.path.abspath(os.path.dirname(__file__))
    return os.path.join(dirname, *paths)


class QmkWrapper(object):
    def __init__(self, keyboard):
        config_root = abs_path(keyboard)
        with open(os.path.join(config_root, "config.json")) as f:
            self.config = json.load(f)

        self.qmk_root = abs_path("qmk_firmware")

        keyboard_dir = self.config.get("path") or self.config.get("keyboard")

        self.mapped_dirs = []
        self.mapped_dirs.append((config_root, os.path.join(
            self.qmk_root, "keyboards", keyboard_dir, "keymaps", "mnye")))
        self.mapped_dirs.append(
            (abs_path("user"), os.path.join(self.qmk_root, "users", "mnye")))

    def _cleanup(self):
        for _, dst in self.mapped_dirs:
            if os.path.exists(dst):
                shutil.rmtree(dst)

    def __enter__(self):
        self._cleanup()
        for src, dst in self.mapped_dirs:
            shutil.copytree(src, dst)
        return self

    def __exit__(self, *_):
        self._cleanup()

    def call(self, cmd_name):
        cmd = ["bin/qmk", cmd_name, "-kb",
               self.config["keyboard"], "-km", "mnye"]
        subprocess.check_call(cmd, cwd=self.qmk_root)

    def compile(self):
        self.call("compile")

    def flash(self):
        self.call("flash")


def compile(keyboard):
    with QmkWrapper(keyboard) as qmk:
        qmk.compile()


def flash(keyboard):
    with QmkWrapper(keyboard) as qmk:
        qmk.flash()


def show(keyboard):
    visualizer.visualize(abs_path("user"), abs_path(keyboard))


def main(argv):
    parser = argparse.ArgumentParser(description="Build util for QMK")
    parser.add_argument("command", nargs=1, choices=[
                        "build", "compile", "flash", "push", "show"])
    parser.add_argument("keyboard", nargs=1)
    args = parser.parse_args()

    keyboard = args.keyboard[0].strip("/")
    if not os.path.isdir(abs_path(keyboard)):
        print("Invalid keyboard: {}".format(keyboard))
        return 1

    try:
        command = args.command[0]
        if command in ("build", "compile"):
            compile(keyboard)
        elif command in ("flash", "push"):
            flash(keyboard)
        elif command == "show":
            show(keyboard)
    except KeyboardInterrupt:
        print()
        print("Aborting.")


if __name__ == "__main__":
    sys.exit(main(sys.argv))
